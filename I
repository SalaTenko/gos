1. Понятия алгоритм, программа, программирование. Процесс получения исполняемой
программы из исходных кодов.
Алгоритм – последовательность команд, предназначенная исполнителю, в результате выполнения которой он должен решить поставленную задачу.
Программа – это набор инструкций, написанных на языке программирования, которые выполняют определенную задачу на компьютере или другом устройстве.
Программирование – это процесс создания компьютерных программ, которые выполняют определенные задачи. Он включает в себя написание кода на определенном языке программирования, тестирование и отладку программы, а также ее оптимизацию и поддержку. Программирование используется для создания различных приложений и программного обеспечения.

Процесс получения исполняемой программы из исходных кодов.
Сначала программа передается препроцессору, который выполняет директивы, содержащиеся в ее тексте.
Получившийся полный текст программы поступает на вход компилятора, который выделяет лексемы (отдельные слова и знаки), а затем на основе грамматики языка распознает выражения и операторы, построенные из этих лексем. При этом компилятор выявляет синтаксические ошибки и в случае их отсутствия строит объектный модуль.
Компоновщик формирует исполняемый модуль программы, подключая к объектному модулю другие объектные модули, в том числе содержащие функции библиотек, обращение к которым содержится в любой программе. Если программа состоит из нескольких исходных файлов, они компилируются по отдельности и объединяются на этапе компоновки. 

2. Представление информации в ЭВМ. Системы счисления. Связь между системами
счисления.
Представление информации в ЭВМ.
Любая информация представляется в ЭВМ в виде чисел и располагается в оперативной памяти, так происходит потому, что цифровую информацию очень удобно кодировать, а значит, ее удобно хранить и обрабатывать.
За единицу представления информации в ЭВМ принимают один бит. Бит может принимать значения 0 или 1.
Бит – очень маленькая единица информации, она удобна для хранения информации в компьютере, но неудобна для ее обработки.

Системы счисления.
Система счисления — это совокупность правил записи чисел посредством конечного набора символов (цифр).
Системы счисления можно классифицировать на непозиционные и позиционные системы.
В непозиционных системах счисления число образуется из цифр, значение которых не изменяется при различном положении цифр в числе. Примером таких систем служит римская система счисления в ней в качестве цифр для составления чисел используются буквы латинского алфавита.
	В позиционных системах счисления количественное значение цифры определяется её позицией в числе. Номер позиции называется разрядом. Число цифр, используемых для представления чисел, называется основанием. 

Связь между системами счисления.
Одно и то же число может быть записано в различных системах счисления. Существуют правила, определяющие порядок перевода числа из одной системы счисления в другую.
Для указания системы счисления при записи числа используется нижний индекс, который ставится после числа.
Для выполнения арифметических операций над числами они должны быть представлены в одной системе счисления.
Перевод чисел из любой системы счисления в десятичную систему осуществляется простым получением их количественных эквивалентов и записи в виде десятичного числа.
Перевод чисел из десятичной системы в любую другую осуществляется путем деления исходного числа на основание требуемой системы и записи остатков от деления в обратном порядке. Например, смотри рис. 17.

Рис. 17. Перевод числа 247 из десятичной системы счисления в двоичную(слева) и восьмеричную (справа) системы
Перевод числа из шестнадцатеричной системы в двоичную систему может быть осуществлен путем представления каждой его цифры в виде двоичной тетрады, и последовательной записи этих тетрад. 
Соответственно, перевод числа из двоичной системы в шестнадцатеричную систему осуществляется путем деления его на тетрады, и представления каждой тетрады в виде шестнадцатеричной цифры. 
Перевод числа из восьмеричной системы в двоичную систему осуществляется аналогично переводу числа из шестнадцатеричной системы, только цифры заменяются не тетрадами, а двоичными триадами. 
Двоичное число при переводе в восьмеричную систему счисления сначала делится на триады, а затем каждая триада представляется в виде восьмеричной цифры. 
Перевод чисел из шестнадцатеричной системы счисления в восьмеричную систему и наоборот осуществляется в два этапа. Сначала исходное число переводится в двоичную или десятичную систему, а затем из двоичной или десятичной системы число переводится в требуемую систему счисления. 


3. Типы данных. Внутреннее представление базовых типов данных. Преобразование
типов данных.
Типы данных. Внутреннее представление базовых типов данных.
Переменная имеет определенный тип. И этот тип определяет, какие значения может иметь переменная и сколько байт в памяти она будет занимать. В Си определены следующие базовые типы данных:

char: представляет один символ. Занимает в памяти 1 байт (8 бит). Может хранить любое значение из диапазона от -128 до 127
short: представляет целое число в диапазоне от –32768 до 32767. Занимает в памяти 2 байта (16 бит).
Имеет псевдонимы short int, signed short и signed short int.
int: представляет целое число. В зависимости от архитектуры процессора может занимать 2 байта (16 бит) или 4 байта (32 бита). Диапазон предельных значений соответственно также может варьироваться от –32768 до 32767 (при 2 байтах) или от −2 147 483 648 до 2 147 483 647 (при 4 байтах).
Имеет псевдонимы signed int и signed
long: представляет целое число в диапазоне от -2 147 483 648 до 2 147 483 647. Занимает в памяти 4 байта (32 бита).
Имеет псевдонимы long int, signed long int и signed long.
float: представляет вещественное число одинарной точности с плавающей точкой в диапазоне +/- 3.4E-38 до 3.4E+38. В памяти занимает 4 байта (32 бита)
double: представляет вещественное число двойной точности с плавающей точкой в диапазоне +/- 1.7E-308 до 1.7E+308. В памяти занимает 8 байт (64 бита)
void: тип без значения

Преобразование типов данных.
Преобразование данных осуществляется с помощью базовых конструкций языка: следование, ветвление, цикл.

Конструкция следование
Операторы в языке Си выполняются последовательно. После завершения текущего оператора производится переход к следующему оператору по тексту программы.
Исключением являются: операторы, входящие в состав ветвления или цикла.

Ветвление


Цикл
Цикл – разновидность управляющей конструкции в высокоуровневых языках программирования. Предназначена для организации многократного исполнения однотипных инструкций над различными данными.
	В языке Си предусмотрено 3 циклических конструкции, которые являются взаимозаменяемыми: 
1) с предусловием – while, for; 
2) с постусловием – do-while.

4. Указатели в языке Си. Тип указателя. Действия над указателями.
Указатель – это переменная, которая хранит адрес области памяти. Указатель, как и переменная, имеет тип. Синтаксис объявления указателей

<тип> *<имя>;

Например
float *a;
long long *b;
Два основных оператора для работы с указателями – это оператор & взятия адреса, и оператор * разыменования. Рассмотрим простой пример.

Действия над указателями.
Указатели в языке Си поддерживают ряд операций: присваивание, получение адреса указателя, получение значения по указателю, некоторые арифметические операции и операции сравнения.

Присваивание
Указателю можно присвоить либо адрес объекта того же типа, либо значение другого указателя или константу NULL.
Для получения адреса объекта используется операция &:

Причем указатель и переменная должны иметь тот же тип, в данном случае int.
Присвоение указателю другого указателя:

Когда указателю присваивается другой указатель, то фактически первый указатель начинает также указывать на тот же адрес, на который указывает второй указатель.
Если мы не хотим, чтобы указатель указывал на какой-то конкретный адрес, то можно присвоить ему условное нулевое значение с помощью константы NULL, которая определена в заголовочном файле stdio.h:


Разыменование указателя
Операция разыменования указателя в виде *имя_указателя, позволяет получить объект по адресу, который хранится в указателе.

Через выражение *pa мы можем получить значение по адресу, который хранится в указателе pa, а через выражение типа *pa = значение вложить по этому адресу новое значение.
И так как в данном случае указатель pa указывает на переменную a, то при изменении значения по адресу, на который указывает указатель, также изменится и значение переменной a.

Указатель на void
Указатели указывают на данные определенных типов. Например, указатель типа int* указывает на значение типа int, но не может указывать на данные других типов, скажем, на объект типа float. Однако можно также определять указатели типа void*, которые могут указывать на данные любого типа. И неявно указатели любых можно преобразовать в указатель типа void*:

Следует учитывать, что к void-указателю мы НЕ можем применить операцию разыменования и тем самым получить значение под адресу, который хранится в этом указателе. Поэтому для получения значения надо приводить к указателю соответствующего типа:

Одно из распространенных применений void-указателя - это вывод адреса на консоль:


Если мы хотим получить адрес из указателя другого типа, то, в соответствии со стандартами, его сначала надо преобразовать к типу void*.

Адрес указателя
Указатель хранит адрес переменной, и по этому адресу мы можем получить значение этой переменной. Но кроме того, указатель, как и любая переменная, сам имеет адрес, по которому он располагается в памяти. Этот адрес можно получить также через операцию &:


Операции сравнения
К указателям могут применяться операции сравнения >, >=, <, <=,==, !=. Операции сравнения применяются только к указателям одного типа и константе NULL. Для сравнения используются номера адресов:

Консольный вывод в моем случае:


Приведение типов
Иногда требуется присвоить указателю одного типа значение указателя другого типа. В этом случае следует выполнить операцию приведения типов:



5. Алгоритмы на базе циклических конструкций. Элементарная теория чисел.

Алгоритмы на базе циклических конструкций. 
Циклом называется блок кода, который для решения задачи требуется повторить несколько раз.
Каждый цикл состоит из
блока проверки условия повторения цикла
тела цикла
 
Цикл выполняется до тех пор, пока блок проверки условия возвращает истинное значение.
Тело цикла содержит последовательность операций, которая выполняется в случае истинного условия повторения цикла. После выполнения последней операции тела цикла снова выполняется операция проверки условия повторения цикла. Если это условие не выполняется, то будет выполнена операция, стоящая непосредственно после цикла в коде программы.

В языке Си следующие виды циклов:
while — цикл с предусловием;
do…while — цикл с постусловием;
for — параметрический цикл (цикл с заданным числом повторений).
 
Цикл с предусловием while
Общая форма записи:
 while (Условие)
{
  БлокОпераций;
} 
Если Условие выполняется (выражение, проверяющее Условие, не равно нулю), то выполняется БлокОпераций, заключенный в фигурные скобки, затем Условие проверяется снова.
Последовательность действий, состоящая из проверки Условия и выполнения БлокаОпераций, повторяется до тех пор, пока выражение, проверяющее Условие, не станет ложным (равным нулю). При этом происходит выход из цикла, и производится выполнение операции, стоящей после оператора цикла.

Цикл с постусловием do...while
Общая форма записи

do {
  БлокОпераций;
} while (Условие); while (Условие);

Цикл do...while — это цикл с постусловием, где истинность выражения, проверяющего Условие проверяется после выполнения Блока Операций, заключенного в фигурные скобки. Тело цикла выполняется до тех пор, пока выражение, проверяющее Условие, не станет ложным, то есть тело цикла с постусловием выполнится хотя бы один раз.
Использовать цикл do...while лучше в тех случаях, когда должна быть выполнена хотя бы одна итерация, либо когда инициализация объектов, участвующих в проверке условия, происходит внутри тела цикла.

Параметрический цикл for
Общая форма записи

for (Инициализация; Условие; Модификация)
{
  БлокОпераций;
}

for — параметрический цикл (цикл с фиксированным числом повторений). Для организации такого цикла необходимо осуществить три операции:
Инициализация - присваивание параметру цикла начального значения;
Условие - проверка условия повторения цикла, чаще всего - сравнение величины параметра с некоторым граничным значением;
Модификация - изменение значения параметра для следующего прохождения тела цикла.
 	Эти три операции записываются в скобках и разделяются точкой с запятой ;;. Как правило, параметром цикла является целочисленная переменная.
Инициализация параметра осуществляется только один раз — когда цикл for начинает выполняться.
Проверка Условия повторения цикла осуществляется перед каждым возможным выполнением тела цикла. Когда выражение, проверяющее Условие становится ложным (равным нулю), цикл завершается. Модификация параметра осуществляется в конце каждого выполнения тела цикла. Параметр может как увеличиваться, так и уменьшаться.
В записи цикла for можно опустить одно или несколько выражений, но нельзя опускать точку с запятой, разделяющие три составляющие цикла.
В цикле for может использоваться операция запятая - , - для разделения нескольких выражений. Это позволяет включить в спецификацию цикла несколько инициализирующих или корректирующих выражений. Выражения, к которым применяется операция запятая, будут вычисляться слева направо.

Элементарная теория чисел.
Основные задачи ЭТЧ:
Простые числа
Разложение на простые множители
Решето Эратосфена
Линейное решето Эратосфена*
НОД и НОК
Алгоритм Евклида
Расширенный алгоритм Евклида*
Операции по модулю
Быстрое возведение в степень
Деление по простому модулю*

6. Понятие массива в языках программирования, области его применения.
Массив в программировании — это структура данных, которая хранит упорядоченный набор однотипных элементов. Его можно представить в виде шкафчика или камеры хранения на вокзале или в магазине: набор ячеек, в каждой из которых может что-то лежать.
	Как и в шкафчике, каждая ячейка массива пронумерована, номер — это её индекс. Причём счёт идёт не от единицы, а от нуля.
Объявление массива выглядит следующим образом:








Многомерные массивы

Массивы могут быть многомерными. Элементы таких массивов сами в свою очередь являются массивами, в которых также элементы могут быть массивами. В большинстве случаев многмерные массивы представляют двухмерные массивы, которые можно представить в виде таблицы. Например, определим двухмерный массив чисел:	





Массивы используются для реализации других структур данных, таких как списки, кучи, хэш-таблицы, запросы, очереди, стеки, строки и списки. Реализации других структур данных на основе массивов часто просты и экономичны по объему (неявные структуры данных), требуют небольших затрат пространства, но могут иметь низкую сложность пространства, особенно при модификации, по сравнению с древовидными структурами данных (сравните отсортированный массив с деревом поиска).

7. Алгоритмы обработки массивов. Задача поиска простых чисел. Линейный алгоритм. Алгоритм Эратосфена.

Алгоритмы обработки массивов. 

Сортировка пузырьком. Один из простейших методов сортировки. Заключается в постепенном смещении элементов с большим значением в конец массива. Элементы последовательно сравниваются попарно, и если порядок в паре нарушен – меняются местами.
Сортировка выбором. Алгоритм ищет наименьший элемент в текущем списке и производит обмен его значения со значением первой неотсортированной позиции. То же самое происходит со вторым элементом с наименьшим значением. Цикл повторяется до тех пор, пока все элементы не займут нужную последовательность.
Сортировка вставками. Применяется для вставки элементов массива на «свое место». Сортировка вставками представляет собой простой метод сортировки и используется для раскладки колоды во время игры в бридж.
Задача поиска простых чисел. 
	Простое число – это натуральное число, имеющее ровно два различных натуральных делителя: единицу и само себя.
Примеры простых чисел:
2, 13, 59, 101, 431, 733, 1153, 2069 и др.
Все остальные натуральные числа, кроме единицы, называются составными.
Все натуральные числа больше единицы разбиваются на простые и составные.
Изучением свойств простых чисел занимается теория чисел.


Линейный алгоритм. 



Алгоритм Эратосфена (Решето Эратосфена).
Решето Эратосфена — алгоритм нахождения всех простых чисел до некоторого целого числа N, который приписывают древнегреческому математику Эратосфену Киренскому.
1. Выписать подряд все целые числа от двух до N (2, 3, 4, …, N).
2. Пусть переменная p изначально равна двум – первому простому числу.
3. Считая от p шагами по p, зачеркнуть в списке все числа от 2p
до n кратные p (то есть числа 2p, 3p, 4p, …).
4. Найти первое незачеркнутое число в списке, большее чем p, и
присвоить значению переменной p это число.
5. Повторять шаги 3 и 4, пока незачеркнутое число есть.


8. Понятие сортировки. Алгоритмы сортировки. Оценка алгоритмов сортировки.
Понятие сортировки. 
Сортировка — процесс упорядочения множества подобных информационных объектов в некотором определенном порядке с целью облегчения последующего поиска нужных элементов.

Алгоритмы сортировки. 
Сортировка пузырьком. Один из простейших методов сортировки. Заключается в постепенном смещении элементов с большим значением в конец массива. Элементы последовательно сравниваются попарно, и если порядок в паре нарушен – меняются местами.
Сортировка выбором. Алгоритм ищет наименьший элемент в текущем списке и производит обмен его значения со значением первой неотсортированной позиции. То же самое происходит со вторым элементом с наименьшим значением. Цикл повторяется до тех пор, пока все элементы не займут нужную последовательность.
Сортировка вставками. Применяется для вставки элементов массива на «свое место». Сортировка вставками представляет собой простой метод сортировки и используется для раскладки колоды во время игры в бридж.

Оценка алгоритмов сортировки.


9. Представление строк в языке Си. Представление символов.

Представление строк в языке Си. 
В языке Си строка - это массив символом, который заканчивается нуль-символом (символ с кодом 0). Строки размещаются в памяти как непрерывный массив байт.
Нуль-символ сигнализирует о фактическом конце строки.



Представление символов.
В персональном компьютере символы хранятся в виде кодов. Соответствие между каждым символом и его кодом задается специальной кодовой таблицей. На нее разработан стандарт ASCII, поэтому коды символов называют ASCII-кодами.

Символьная информация хранится и обрабатывается в компьютере в виде цифрового кода, то есть каждому символу ставится в соответствие некоторое число-код. Для разных типов компьютеров и операционных систем используются различные наборы символов. Необходимый набор символов, предусмотренный в том или ином компьютере, обычно включает:
управляющие символы, соответствующие определенным функциям;
цифры;
буквы алфавита;
специальные знаки (пробел, скобки, знаки препинания и т.д.);
знаки операций.

Для представления символьной информации в компьютере чаще всего используется алфавит, состоящий из 256 символов. Каждый символ такого алфавита можно закодировать 8 битами (1 байтом) памяти. Все символы пронумерованы от 0 до 255, причем каждому номеру соответствует 8-разрядный двоичный код от 00000000 до 11111111.
Среди наборов символов наибольшее распространение получила таблица кодировки ASCII (American Standard Code for Information Interchange – американский стандартный код для обмена информацией). В данной таблице стандартными являются только первые 128 символов (символы с номерами от 0 до 127). Сначала размещаются управляющие (неотображаемые) символы (символы с номерами от 0 до 31). Далее идут буквы латинског о алфавита, цифры, знаки препинания, скобки и некоторые другие символы, причем латинские буквы располагаются в алфавитном порядке, цифры также упорядочены от 0 до 9. Остальные 128 кодов таблицы символов ASCII используются для размещения символов национальных алфавитов, символов псевдографики и научных символов.
Для представления символьных переменных в языке Си используется тип char. Значением переменной типа char является 8- битный код, соответствующий тому или иному символу.

10. Операции над строками. Операции над строками в многобайтовой кодировке.

Операции над строками. 



Операции над строками в многобайтовой кодировке.
По определению, кодировка - это способ представления чего либо, в нашем случае символов. Кодировки символов делятся на однобайтные - каждый символ представлен одним байтом и многобайтные, в которых одному символу соответствует несколько байтов. В свою очередь многобайтные кодировки можно разделить на кодировки с фиксированным количеством байтов - каждому символу соответствует одинаковое количество байтов, и «плавающие», в которых один символ может представляться разным количеством байтов в зависимости от его содержимого. К первым относятся кодировки типа Unicode, в которой каждый символ представлен двумя байтами, ко вторым - UTF-8 и др. Плавающие кодировки - отдельная тема, языки С/С++ не предлагают для них никакой поддержки.
Необходимость в многобайтных кодировках возникла из-за того, что одним стандартным байтом можно представить не так много символов, например восьмибитный байт способен принимать значения от 0 до 255, а значит в такой кодировке не может существовать более 256 различных символов. Учитывая, что, например, в японском языке около двух тысяч иероглифов, 256 символов японцам явно не хватит. Но уже двух восьмибитных байтов хватит для представления 65536 символов - вполне неплохо, хотя и недостаточно для представления всех символов на свете.
Между однобайтными и фиксированными многобайтными строками принципиальной разницы нет. В С/С++ существует специальный тип для многобайтных символов - wchar_t и специальные функции для работы со строками, состоящими из таких символов. Кроме того, существует специальная форма для записи строковых литералов, в которых символы представлены несколькими байтами: перед кавычками ставится буква L. Т.е., возвращаясь к нашему первому примеру, вызов функции SetWindowText в Unicode-программе будет выглядеть так:

SetWindowText(hwnd, L"Новый заголовок окна");



11. Понятие функции в языке СИ. Определение, объявление и вызов функции. Указатель на функцию.

Понятие функции в языке СИ.
Функция - это блок кода, который может быть вызван из другого места программы. Функция может иметь параметры (входные данные) и возвращаемое значение (выходные данные). Они позволяют разбить программу на более мелкие блоки, что упрощает ее написание и понимание. В языке C могут быть как стандартные функции (например, printf()), так и пользовательские функции, написанные самим программистом.

Определение функции:

тип_возвращаемого_значения имя_функции (список_параметров) {
    // тело функции
}

Объявление функции в языке C выглядит следующим образом:

тип_возвращаемого_значения имя_функции (список_параметров);

Вызов функции в языке C выглядит следующим образом:

имя_функции(список_аргументов);

тип_возвращаемого_значения - это тип данных, возвращаемый функцией.
имя_функции - это имя функции, которое будет использоваться для ее вызова.
список_параметров - это список параметров, которые функция принимает.
список_аргументов - это список аргументов, которые нужно передать в функцию.

Указатель на функцию.
Указатель на функцию в языке C представляет собой переменную, которая хранит адрес функции. Он объявляется следующим образом:

тип_возвращаемого_значения (*имя_указателя_на_функцию)(список_параметров);

где тип_возвращаемого_значения - это тип данных, которые функция вернет после выполнения, имя_указателя_на_функцию - это имя указателя на функцию, список_параметров - это список параметров, которые функция принимает.

Пример объявления указателя на функцию:

int (*myFuncPtr)(int, int);

Это означает, что myFuncPtr - это указатель на функцию, которая принимает два целочисленных аргумента и возвращает целочисленное значение.

Пример использования указателя на функцию:

int sum(int a, int b) {
    return a + b;
}

int main() {
    int (*myFuncPtr)(int, int);
    myFuncPtr = &sum; // присваиваем указателю адрес функции sum
    int result = (*myFuncPtr)(2, 3); // вызываем функцию через указатель
    printf("%d\n", result); // выводим результат
    return 0;
}

В данном примере мы объявляем указатель на функцию myFuncPtr, присваиваем ему адрес функции sum и вызываем эту функцию через указатель, передавая ей аргументы 2 и 3. Результатом будет число 5.

12. Функции с параметрами переменной длины. Передача параметров функции main.

Функции с параметрами переменной длины. 
	Функции с параметрами переменной длины в языке C позволяют передавать в функцию аргументы различных типов и количества. Для работы с такими функциями используется стандартная библиотека <stdarg.h>, которая содержит макросы и функции для работы с параметрами переменной длины.

Пример объявления функции с параметрами переменной длины:

c
#include <stdarg.h>

int sum(int count, ...) {
    va_list args; // объявляем список аргументов
    int result = 0;
    va_start(args, count); // инициализируем список аргументов
    for (int i = 0; i < count; i++) {
        result += va_arg(args, int); // получаем очередной аргумент
    }
    va_end(args); // завершаем работу со списком аргументов
    return result;
}


В данном примере мы объявляем функцию sum, которая принимает первым аргументом количество аргументов, а затем произвольное число целочисленных аргументов. Для работы с аргументами используется список аргументов args, который объявляется с помощью макроса va_list. Для инициализации списка аргументов используется функция va_start, которой передается список аргументов и последний известный аргумент. В цикле мы получаем очередной аргумент с помощью функции va_arg и складываем его с результатом. После окончания работы со списком аргументов мы вызываем функцию va_end.

Пример вызова функции sum:

c
int result = sum(3, 2, 3, 4);
printf("%d\n", result); // выводим результат (9)


В данном примере мы вызываем функцию sum, передавая ей количество аргументов (3) и три целочисленных аргумента (2, 3, 4). Результатом будет число 9.

Передача параметров функции main.
Функция main в языке программирования C имеет следующий прототип:

int main(int argc, char *argv[])

Здесь argc - количество аргументов командной строки, переданных программе, а argv - массив указателей на строки, содержащие сами аргументы.

Например, если программа была запущена с командой:

./my_program arg1 arg2 arg3

то argc будет равно 4 (включая имя программы), а argv будет содержать следующие значения:

argv[0] = "./my_program"
argv[1] = "arg1"
argv[2] = "arg2"
argv[3] = "arg3"

Таким образом, параметры функции main позволяют программе получить доступ к аргументам командной строки, переданным ей при запуске. Это может быть полезно для написания утилит, которые могут быть запущены с различными параметрами в зависимости от потребностей пользователя.

13. Многофайловые программы. Классы памяти переменных.

Многофайловые программы. 


Классы памяти переменных.




14. Структурный тип данных. Тип данных объединение.

	Структура — это объединение нескольких объектов, возможно, различного типа под одним именем, которое является типом структуры. В качестве объектов могут выступать переменные, массивы, указатели и другие структуры.
Структуры позволяют трактовать группу связанных между собой объектов не как множество отдельных элементов, а как единое целое. Структура представляет собой сложный тип данных, составленный из простых типов.
Общая форма объявления структуры:

struct ИмяСтруктуры
{
  тип ИмяЭлемента1;
  тип ИмяЭлемента2;
  . . .
  тип ИмяЭлементаn;
};

После закрывающей фигурной скобки } в объявлении структуры обязательно ставится точка с запятой.





Объединения
В языке программирования C также существует тип данных объединение (union), который позволяет хранить в одном и том же месте оперативной памяти несколько переменных разных типов. Объединение определяется с помощью ключевого слова union, за которым следует имя объединения и список его членов в фигурных скобках. Например:

union data {
  int i;
  float f;
  char c;
};

Здесь имя объединения - data, а его члены - i (целое число), f (вещественное число) и c (символ). Объединение может быть полезно, например, для экономии памяти при работе с разными типами данных, если нужно использовать только один из них в каждый момент времени. Доступ к членам объединения также осуществляется с помощью оператора точки (.).

15. Понятие файла. Файловая система. Операции с файлом.
Понятие файла.
Файл – это набор данных, размещенный на внешнем носителе и рассматриваемый в процессе обработки как единое целое. В файлах размещаются данные, предназначенные для длительного хранения.
Различают два вида файлов: текстовые и бинарные. Текстовые файлы представляют собой последовательность ASCII символов и могут быть просмотрены и отредактированы с помощью любого текстового редактора.
Бинарные (двоичные) файлы представляют собой последовательность данных, структура которых определяется программно.
Имя файла состоит из двух частей, разделенных точкой: собственно имя файла и расширение, определяющее его тип (программа, данные и т. д.). Собственно имя файлу дает пользователь, а тип файла обычно задается программой автоматически при его создании.

Файловая система
Файл - это именованная область памяти на компьютере, которая используется для хранения данных. 
Файловая система - это программное обеспечение, которое управляет организацией и хранением файлов на компьютере или другом устройстве хранения данных. Она определяет структуру и формат файлов, способы доступа к ним, права доступа пользователей, а также методы их хранения и удаления.

Операции с файлом.
В процессе работы на компьютере над файлами чаще всего производятся следующие операции: копирование (копия файла помещается в другой каталог); перемещение (сам файл перемещается в другой каталог); удаление (запись о файле удаляется из каталога); переименование (изменяется имя файла).

16. Работа с файлами в языке СИ.
	Для программиста открытый файл представляется как последовательность считываемых или записываемых данных. При открытии файла с ним связывается поток ввода-вывода. Выводимая информация записывается в поток, вводимая информация считывается из потока.
Когда поток открывается для ввода-вывода, он связывается со стандартной структурой типа FILE, которая определена в stdio.h. Структура FILE содержит необходимую информацию о файле.
Открытие файла осуществляется с помощью функции fopen(), которая возвращает указатель на структуру типа FILE, который можно использовать для последующих операций с файлом.

Возвращаемое значение — указатель на открытый поток. Если обнаружена ошибка, то возвращается значение NULL.
Функция fclose() закрывает поток или потоки, связанные с открытыми при помощи функции fopen() файлами. Закрываемый поток определяется аргументом функции fclose().
Возвращаемое значение: значение 0, если поток успешно закрыт; константа EOF, если произошла ошибка.


	Копирует строку в поток с текущей позиции. Завершающий нуль- символ не копируется.
Пример Ввести число и сохранить его в файле s1.txt. Считать число из файла s1.txt, увеличить его на 3 и сохранить в файле s2.txt.



17. Отладка компьютерных программ. Опции компилятора. Понятие трассировки. Управление точками останова. Команды отладчика.

Отладка компьютерных программ. 
Отладка — этап разработки компьютерной программы, на котором обнаруживают, локализуют и устраняют ошибки.
Отладчик — компьютерная программа, предназначенная для поиска ошибок в других программах, ядрах операционных систем, SQL-запросах и других видах кода.

Основные функции отладчика:
Пошаговое выполнение программы:
• Построчное выполнение кода
• Установка точек останова (условных или безусловных)
Операции с переменными:
• Просмотр значений
• Установка новых значений
• Отслеживание изменения значения переменной
Перемещение по стеку вызовов

Опции компилятора. 
	
Понятие трассировки. 
Трассировка – процесс пошагового исполнения программы. В режиме трассировки программист видит последовательность выполнения операторов, а также может запросить текущие значения переменных на данном шаге выполнения программы. Это упрощает процесс обнаружения ошибок.
Трассировка может быть начата и окончена в любом месте программы.
Выполнение программы может останавливаться:
1) на каждой команде;
2) на точках останова.
Трассировка может выполняться с заходом в процедуры и без него.

Управление точками останова. 
Типы точек останова:
breakpoint – остановка выполнения в конкретной точкепрограммы (номер строки, функция)
watchpoint – остановка выполнения в случае изменения значения заданной области памяти
catchpoint – остановка выполнения при возникновении заданного события

Команды отладчика.
1. break: устанавливает точку останова на указанной строке кода
2. run: запускает программу до первой точки останова или до конца программы
3. next: переходит к следующей строке кода без захода в функции
4. step: переходит к следующей строке кода с заходом в функции
5. print: выводит значение переменной или выражения на экран
6. watch: устанавливает точку останова при изменении значения переменной
7. info: выводит информацию о состоянии программы, переменных и стеке вызовов
8. backtrace: выводит стек вызовов функций на момент остановки программы
9. continue: продолжает выполнение программы после остановки на точке останова
10. quit: завершает работу отладчика и программы

